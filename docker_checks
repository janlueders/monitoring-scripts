#!/bin/bash
#
# -------------------------------------- Description ---------------------------------------------------
#
# Monitoring Docker CPU / MEM / Network / Status
# Usage example :
# ./check_docker.sh -n <container name> -c <PERC_WARNING_CPU>,<PERC_CRITCAL_CPU>
# ./check_docker.sh -n <container name> -m <PERC_WARNING_MEM>,<PERC_CRITICAL_MEM>
#
# ------------------------------------- Requierements --------------------------------------------------
#
# Please add nagios user in group Docker -> usermod -aG docker ${USER}
# If nagios have shell "/bin/false" -> chsh -s /bin/bash ${USER}
# Minimum Docker version -> 1.10.0
#
# ---------------------------------------- License -----------------------------------------------------
# 
# This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>. 
#   
#   contribute to https://github.com/jryberg
#----------------------------------------------------------------------------------------------------------

VERSION="Version 0.1"
AUTHOR="2019 by janlueders"
STATE_OK=0
STATE_WARN=1
STATE_CRIT=2

## PRINT VERSION #
function version {
	echo "$VERSION"
}


## Container exists ##
function dockerexist () {
        dckname="$1"
        container=`docker stats --no-stream | grep $dckname`

        if [ ! -z "$container" ]
        then
                echo "true"
	fi
}


function print_help {
        echo "Usage: ./check_docker.sh [-v] [-h] [-n [-s -c -m -ir -iw -nu -nd]]
        -h, --help
        print this help message
        -v, --version
	print version program
	-n, --name
        name docker to check
        -c, --cpulimit PERC_WARNING_CPU,PERC_CRITCAL_CPU
        number in percent alert for CPU
        -m, --memlimit PERC_WARNING_MEM,PERC_CRITICAL_MEM
        number in percent alert for MEM usage
        -ir, --ioread MB_WARNING_IO_READ,MB_CRITICAL_IO_READ
	the I/O Read with waring and critial in MB
	-iw, --iowrite MB_WARNING_IO_WRITE,MB_CRITICAL_IO_WRITE
	the I/O Write with warning and critical in MB 
	-s, --status
	check if docker is alive
	-nu, --netupload GB_WARNING_UPLOAD,GB_CRITICAL_UPLOAD
	number in gb alert for upload
	-nd, --netdownload GB_WARNING_DOWNLOAD,GB_CRITICAL_DOWNLOAD"
}

function getstats () {
        local typestats="$1"
	local cid="$2"
		case "$typestats" in
  		      CPUUsage)
			currentstats=`docker stats --no-stream | grep $cid | awk '{print $3}'`
			;;
                      IORead)
			currentstats=`docker stats --no-stream | grep $cid | awk '{print $11}'`
			;;
                      IOWrite)
                        currentstats=`docker stats --no-stream | grep $cid | awk '{print $13}'`
                        ;;
                      Upload)
                        currentstats=`docker stats --no-stream | grep $cid | awk '{print $10}'`
                        ;;
                      Download)
                        currentstats=`docker stats --no-stream | grep $cid | awk '{print $8}'`
                        ;;
        	      MemUsage)
			currentstats=`docker stats --no-stream | grep $cid | awk '{print $7}'`
			;;
		      *)
            		echo "Unknown argument: $typestats"
            		exit $STATE_UNKN
            		;;
     		esac
		echo "$currentstats"
}

function monitorperc () {
        local typestats="$1"
        local arg_limit="$2"
        local shortid="$3"
        formatreg='^[0-9.]{1,5},[0-9.]{1,5}$'

        if  [[ $arg_limit =~ $formatreg ]]
        then
                valcurrentp=$(getstats $typestats $shortid)
                vallimitwarn=`echo "$arg_limit" | awk '{split($0,a,","); print a[1]}'`
                vallimitcrit=`echo "$arg_limit" | awk '{split($0,a,","); print a[2]}'`
		valcurrent=${valcurrentp::-1}
		valcur=`echo "${valcurrentp//i}"`
		lowercase_current_val=`echo "$typestats" | awk '{print tolower($0)}'`
		valcur=`echo "$valcur" | awk '{print tolower($0)}'`

		if (( $(echo "$valcurrent > $vallimitcrit" |bc -l) ))
                then
                        echo ", CRITICAL - $typestats: $valcurrentp|$lowercase_current_val=$valcur;$vallimitwarn;$vallimitcrit;;"
                elif (( $(echo "$valcurrent > $vallimitwarn" |bc -l) ))
                then
                        echo "WARNING - $typestats: $valcurrentp|$lowercase_current_val=$valcur;$vallimitwarn;$vallimitcrit;;"
		else
			echo "OK - $typestats $valcurrentp|$lowercase_current_val=$valcur;$vallimitwarn;$vallimitcrit;;"
		fi 
       else
                echo "Value $arg_limit malformed, please show --help"
       fi
}

arg_containername=""
arg_cpulimitperc=""
arg_memlimitperc=""
arg_ioread=""
arg_iowrite=""
arg_netupload=""
arg_netdownload=""
arg_checkstatus=""

while test -n "$1"; do
    case "$1" in
	-h|--help)
	    print_help
	    exit "$STATE_OK"
            ;;
	-v|--version)
            print_version
	    exit "$STATE_OK"
	    ;;
	-n|--name)
	    arg_containername=$2
	    shift
	    ;;
	-c|--cpulimitperc)
	    arg_cpulimitperc=$2
	    shift
	    ;;
	-m|--memlimitperc)
	    arg_memlimitperc=$2
	    shift
	    ;;
	-ir|--ioread)
	    arg_ioread=$2
	    shift
	    ;;
	-iw|--iowrite)
	    arg_iowrite=$2
	    shift
	    ;;
	-nu|--netupload)
	    arg_netupload=$2
	    shift
	    ;;
        -nd|--netdownload)
            arg_netdownload=$2
            shift
            ;;
	-s|--status)
	    arg_checkstatus="true"
	    ;;
	*)
	    echo "Unknown argument: $1"
	    print_help
	    exit $STATE_CRIT
	    ;;
     esac
     shift
done

valid_version=0
version_docker=`docker --version | awk '{split($0,a,","); print a[1]}' | sed "s/Docker version //g"`
major_param=`echo "$version_docker" | awk '{split($0,a,"."); print a[1]}'`
minor_param=`echo "$version_docker" | awk '{split($0,a,"."); print a[2]}'`
if [ "$major_param" -ge "1" ] && [ "$minor_param" -ge "13" ]
then
	valid_version=1
elif [ "$major_param" -ge "1" ] && [ "$minor_param" -ge "10" ]
then
	valid_version=0
elif [ "$major_param" -ge "1" ]
then
        valid_version=1
else
	echo "Docker version must be higher 1.10.0 for use this plugin"
	exit $STATE_CRIT
fi

if [ ! -z $arg_containername ]
then
	is_docker=$(dockerexist $arg_containername)

	if [[ $is_docker == "true" ]]
	then

		statscpu="CPUUsage"
		statsmemu="MemUsage"
		statsioread="Read"
		statsiowrite="Write"
		statsupload="Upload"
		statdownload="Download"

		if [[ $arg_checkstatus == "true" ]]
                then
			metricval=" running|running=1;0;0;;"
                fi

		if [ ! -z $arg_cpulimitperc ] 
		then
			metricval=`echo "$(monitorperc $statscpu $arg_cpulimitperc $arg_containername)"`
		fi

		if [ ! -z $arg_memlimitperc ]
                then
                	metricval=`echo "$(monitorperc $statsmemu $arg_memlimitperc $arg_containername)"`
		fi

		if [ ! -z $arg_ioread ]
                then
                	metricval=`echo "$(monitorperc $statsioread $arg_ioread $arg_containername)"`
		fi

                if [ ! -z $arg_iowrite ]
                then
                        metricval=`echo "$(monitorperc $statsiowrite $arg_iowrite $arg_containername)"`
                fi

                if [ ! -z $arg_netupload ]
                then
                        metricval=`echo "$(monitorperc $statsupload $arg_netupload $arg_containername)"`
                fi

                if [ ! -z $arg_netdownload ]
                then
                        metricval=`echo "$(monitorperc $statsdownload $arg_netdownload $arg_containername)"`
                fi
	else
		echo "Docker not running or not exist"
		exit $STATE_CRIT
	fi

        if [[ $metricval == *"CRITICAL"* ]]
	then 
        	echo "${metricval}"
                exit $STATE_CRIT
        elif [[ $metricval == *"WARNING"* ]]
	then
		echo "${metricval}"
		exit $STATE_WARN
	else
		echo "${metricval}"
		exit $STATE_OK
	fi
else
	echo "Docker Name required"
	exit $STATE_CRIT
fi
